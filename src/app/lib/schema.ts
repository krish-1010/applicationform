import { z } from 'zod';

function checkFileType(file: File) {
    if (file?.name) {
        const fileType = file.name.split(".").pop();
        if (fileType === "jpg" || fileType === "jpeg") return false;
    }
    return true;
}

export const FormDataSchema = z.object({
  appno: z.string().min(1, 'Application number is required'),
  date: z.string().min(1, 'Date is required'),
  fname: z.string().min(1, 'First name is required'),
  sname: z.string().min(1, 'Surname is required'),
  lname: z.string().min(1, 'Last name is required'),
  gender: z.string().min(1, 'Gender is required'),
  presadd: z.string().min(1, 'Present address is required'),
  permadd: z.string().min(1, 'Permanent address is required'),
  mothertongue: z.string().min(1, 'Mother tongue is required'),
  nationality: z.string().min(1, 'Nationality is required'),
  dob: z.string().min(1, 'Date of birth is required'),
  bloodgroup: z.string().min(1, 'Blood group is required'),
  aadhaar: z.string().min(1, 'Aadhaar number is required'),
  passport: z.string().optional(),
  mobile: z.string().min(1, 'Mobile number is required'),
  email: z.string().email('Invalid email address'),
  parentname: z.string().min(1, 'Parent name is required'),
  relationshiptostudent: z.string().min(1, 'Relationship to student is required'),
  occupation: z.string().min(1, 'Occupation is required'),
  addressforcoresspondence: z.string().min(1, 'Address for correspondence is required'),
  challenge: z.string().min(1, 'Challenge information is required'),
  hearing: z.boolean(),
  ortho: z.boolean(),
  visual: z.boolean(),
  blind: z.string().optional(),
  disable: z.string().optional(),
  program: z.string().min(1, 'Program is required'),
  comments: z.string().optional(),
  cash: z.boolean(),
  cheque: z.boolean(),
  dd: z.boolean(),
  neft: z.boolean(),
  rtgs: z.boolean(),
  nach: z.boolean(),
  credit: z.boolean(),
  debit: z.boolean(),
  gpay: z.boolean(),
  phnpe: z.boolean(),
  otherpaymentmode: z.string().optional(),
  feestatus: z.string().min(1, 'Fee status is required'),
  paidstatus: z.string().optional(),
  amountpaid: z.string().min(1, 'Amount paid is required'),
  t11: z.string().optional(),
  t12: z.string().optional(),
  t13: z.string().optional(),
  t21: z.string().optional(),
  t22: z.string().optional(),
  t23: z.string().optional(),
  t31: z.string().optional(),
  t32: z.string().optional(),
  t33: z.string().optional(),
  t41: z.string().optional(),
  t42: z.string().optional(),
  t43: z.string().optional(),
  t51: z.string().optional(),
  t52: z.string().optional(),
  t53: z.string().optional(),
  t61: z.string().optional(),
  t62: z.string().optional(),
  t63: z.string().optional(),
  declarationplace: z.string().min(1, 'Declaration place is required'),
  declarationdate: z.string().min(1, 'Declaration date is required'),
  signApplicant: z.instanceof(File).optional(),
  signParent: z.instanceof(File).optional(),
  documents: z.string().optional(),
  documentFiles: z.record(z.string(), z.instanceof(File)).optional(),
  feereceipt: z.string().optional(),
  img: z.any().refine((file: File) => checkFileType(file), "Only .pdf, .docx formats are supported."),
});
